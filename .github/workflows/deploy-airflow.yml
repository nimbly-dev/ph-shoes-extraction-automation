# .github/workflows/deploy-airflow.yml
name: Airflow Deployment Pipeline

on:
  workflow_dispatch:
    inputs:
      aws_region:
        description: 'Cloud Region'
        required: true
        default: 'ap-southeast-1'
      ec2_key_name:
        description: 'SSH Key Name'
        required: true
        default: 'ec2-ph-shoes-automation-keypair-name'
      ec2_instance_name:
        description: 'Server Name Tag'
        required: true
        default: 'airflow-ec2'
      artifact_bucket_name:
        description: 'Artifacts Bucket'
        required: true
        default: 'ph-shoes-airflow-artifacts'

env:
  CLOUD_REGION: ${{ github.event.inputs.aws_region }}
  BUCKET:       ${{ github.event.inputs.artifact_bucket_name }}
  OBJECT_KEY:   deployment/deployment.zip

jobs:

  package-and-upload:
    name: üì¶ Package & Upload
    runs-on: ubuntu-latest
    environment: main

    steps:
      - uses: actions/checkout@v3

      - name: Configure Cloud Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ env.CLOUD_REGION }}

      - name: Build & Bundle Artifacts
        run: |
          set -euxo pipefail
          # Build Docker image
          docker build -t ph_shoes_airflow_scheduler:latest airflow_dags
          docker save -o image.tar ph_shoes_airflow_scheduler:latest

          # Archive DAGs
          tar czf dags.tar.gz -C airflow_dags .

          # Bundle everything
          rm -rf bundle && mkdir -p bundle/scripts
          cp deployment/appspec.yml bundle/
          cp deployment/scripts/*.sh  bundle/scripts/
          cp image.tar dags.tar.gz      bundle/
          cd bundle && zip -r ../deployment.zip .

      - name: Upload to Storage
        run: |
          set -euxo pipefail
          aws s3 rm s3://$BUCKET/$OBJECT_KEY --region $CLOUD_REGION || true
          aws s3 cp deployment.zip s3://$BUCKET/$OBJECT_KEY --region $CLOUD_REGION


  review-infrastructure:
    name: üîç Review Changes
    needs: package-and-upload
    runs-on: ubuntu-latest
    environment: main

    steps:
      - uses: actions/checkout@v3

      - name: Configure Cloud Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ env.CLOUD_REGION }}

      - name: Initialize & Review
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.6

      - run: |
          cd terraform-ec2-airflow
          terraform init -input=false -reconfigure
          terraform plan \
            -var="redeploy_id=${{ github.run_id }}" \
            -var="ec2_key_name=${{ github.event.inputs.ec2_key_name }}" \
            -var="ec2_instance_name=${{ github.event.inputs.ec2_instance_name }}" \
            -var="environment=prod"


  provision-environment:
    name: üöÄ Provision Airflow Server
    needs: review-infrastructure
    runs-on: ubuntu-latest
    environment: main

    steps:
      - uses: actions/checkout@v3

      - name: Configure Cloud Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ env.CLOUD_REGION }}

      - name: Apply Configuration
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.6

      - run: |
          cd terraform-ec2-airflow
          # Force a fresh server each run
          terraform taint module.ec2_instance.aws_instance.this[0] || true
          terraform apply -auto-approve \
            -var="redeploy_id=${{ github.run_id }}" \
            -var="ec2_key_name=${{ github.event.inputs.ec2_key_name }}" \
            -var="ec2_instance_name=${{ github.event.inputs.ec2_instance_name }}" \
            -var="environment=prod"


  deploy-application:
    name: üöÄ Deploy Application
    needs: provision-environment
    runs-on: ubuntu-latest
    environment: main

    steps:
      - uses: actions/checkout@v3

      - name: Configure Cloud Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ env.CLOUD_REGION }}

      - name: Deploy to Server
        shell: bash
        env:
          AWS_REGION: ${{ env.CLOUD_REGION }}
          BUCKET:     ${{ env.BUCKET }}
          KEY:        ${{ env.OBJECT_KEY }}
          APP:        ph-shoes-airflow-codedeploy-app
          GROUP:      ph-shoes-airflow-deployment-group
        run: |
          set -euxo pipefail
          echo "Starting deployment‚Ä¶"
          DEPLOY_ID=$(aws deploy create-deployment \
            --application-name      "$APP" \
            --deployment-group-name "$GROUP" \
            --s3-location           bucket="$BUCKET",bundleType=zip,key="$KEY" \
            --file-exists-behavior OVERWRITE \
            --region                "$AWS_REGION" \
            --query deploymentId --output text)
          echo "Deployment ID: $DEPLOY_ID"

          if ! aws deploy wait deployment-successful \
               --deployment-id "$DEPLOY_ID" \
               --region         "$AWS_REGION"; then
            echo "‚ùå Deployment failed‚Äîshowing details:"
            aws deploy get-deployment --deployment-id "$DEPLOY_ID" --region "$AWS_REGION" --output json
            aws deploy list-deployment-instances --deployment-id "$DEPLOY_ID" --region "$AWS_REGION" --output json
            exit 1
          fi

          echo "‚úÖ Deployment succeeded: $DEPLOY_ID"
