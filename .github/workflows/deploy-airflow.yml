name: Airflow Full CD

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'deploy (create/replace) or destroy the EC2 Airflow instance'
        required: true
        default: 'deploy'
        type: choice
        options:
          - deploy
          - destroy

      aws_region:
        description: 'AWS Region'
        required: true
        default: 'ap-southeast-1'

      ec2_key_name:
        description: 'EC2 KeyPair name'
        required: true
        default: 'ec2-ph-shoes-automation-keypair-name'

      ec2_instance_name:
        description: 'EC2 instance Name tag'
        required: true
        default: 'airflow-ec2'

      artifact_bucket_name:
        description: 'S3 bucket for CodeDeploy artifacts'
        required: true
        default: 'ph-shoes-airflow-artifacts'

env:
  S3_BUCKET: ${{ github.event.inputs.artifact_bucket_name }}
  S3_KEY: deployment/deployment.zip

jobs:

  build-artifacts:
    name: Build & Package
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials for S3
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ github.event.inputs.aws_region }}

      - name: Build scheduler Docker image & save to tar
        run: |
          docker build -t ph_shoes_airflow_scheduler:latest airflow_dags
          docker save ph_shoes_airflow_scheduler:latest -o ph_shoes_airflow_scheduler.tar

      - name: Archive DAGs folder
        run: |
          tar czf dags.tar.gz -C airflow_dags .

      - name: Prepare deployment.zip
        run: |
          mkdir deploy_pkg
          cp deployment/appspec.yml         deploy_pkg/
          cp deployment/scripts/*.sh        deploy_pkg/
          cp dags.tar.gz                    deploy_pkg/
          cp ph_shoes_airflow_scheduler.tar deploy_pkg/
          cd deploy_pkg
          zip -r ../deployment.zip .

      - name: Upload deployment.zip to S3
        run: aws s3 cp deployment.zip s3://$S3_BUCKET/$S3_KEY

  manage-ec2:
    name: Manage EC2 Airflow
    runs-on: ubuntu-latest
    needs: build-artifacts

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials for Terraform
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ github.event.inputs.aws_region }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.6

      - name: Terraform Init (EC2-Airflow)
        working-directory: terraform-ec2-airflow
        run: terraform init -input=false -reconfigure

      - name: Terraform Apply (deploy)
        if: ${{ github.event.inputs.action == 'deploy' }}
        working-directory: terraform-ec2-airflow
        run: terraform apply -auto-approve

      - name: Terraform Destroy (teardown)
        if: ${{ github.event.inputs.action == 'destroy' }}
        working-directory: terraform-ec2-airflow
        run: terraform destroy -auto-approve

  trigger-codedeploy:
    name: Trigger CodeDeploy
    runs-on: ubuntu-latest
    needs: manage-ec2
    if: ${{ github.event.inputs.action == 'deploy' }}

    steps:
      - name: Configure AWS credentials for CodeDeploy
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ github.event.inputs.aws_region }}

      - name: Create CodeDeploy deployment
        run: |
          aws deploy create-deployment \
            --application-name ph-shoes-airflow-codedeploy-app \
            --deployment-group-name ph-shoes-airflow-deployment-group \
            --s3-location bucket=$S3_BUCKET,bundleType=zip,key=$S3_KEY \
            --region ${{ github.event.inputs.aws_region }}
