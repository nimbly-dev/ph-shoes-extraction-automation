name: Run ph_shoes_etl DAG & trigger dbt Cloud

on:
  workflow_dispatch:
    inputs:
      dag_id:
        description: 'Airflow DAG ID'
        required: true
        default: 'ph_shoes_etl'
      run_dbt:
        description: 'Also trigger the downstream dbt Cloud job?'
        required: true
        type: choice
        default: 'true'
        options: ['true','false']

env:
  AWS_REGION:        ap-southeast-1
  EC2_INSTANCE_NAME: airflow-ec2

jobs:
  run-and-trigger:
    runs-on: ubuntu-latest

    steps:
      # 1) check out
      - uses: actions/checkout@v3

      # 2) AWS creds so we can look up the EC2 host
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ env.AWS_REGION }}

      # 3) resolve public DNS
      - name: Resolve Airflow host
        id: host
        run: |
          ID=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=${EC2_INSTANCE_NAME}" \
                      "Name=instance-state-name,Values=running" \
            --query "Reservations[0].Instances[0].InstanceId" \
            --output text)
          DNS=$(aws ec2 describe-instances \
            --instance-ids "$ID" \
            --query "Reservations[0].Instances[0].PublicDnsName" \
            --output text)
          echo "airflow_host=http://${DNS}:8080" >> $GITHUB_OUTPUT

      # 4) smoke-test the webserver
      - name: Test Airflow health
        run: |
          curl -fsS "${{ steps.host.outputs.airflow_host }}/health" \
            && echo "✅ Airflow is reachable"

      # 5) un-pause the DAG
      - name: Unpause DAG via REST
        run: |
          DAG=${{ github.event.inputs.dag_id }}
          curl -fsS -X PATCH \
            "${{ steps.host.outputs.airflow_host }}/api/v1/dags/${DAG}" \
            -u "${{ secrets.AIRFLOW_USER }}:${{ secrets.AIRFLOW_PASSWORD }}" \
            -H "Content-Type: application/json" \
            -d '{"is_paused":false}'

      # 6) trigger a run
      - name: Trigger DAG run via REST
        id: trigger
        run: |
          DAG=${{ github.event.inputs.dag_id }}
          RUN_ID="gh-action-$(date +%s)"
          RESPONSE=$(curl -fsS -X POST \
            "${{ steps.host.outputs.airflow_host }}/api/v1/dags/${DAG}/dagRuns" \
            -u "${{ secrets.AIRFLOW_USER }}:${{ secrets.AIRFLOW_PASSWORD }}" \
            -H "Content-Type: application/json" \
            -d '{"dag_run_id":"'"$RUN_ID"'","conf":{}}')
          echo "$RESPONSE" | jq
          echo "run_id=$RUN_ID" >> $GITHUB_OUTPUT

      # 7) wait up to 30 min for that run to succeed/fail
      - name: Wait for DAG run to finish
        run: |
          DAG=${{ github.event.inputs.dag_id }}
          RUN_ID=${{ steps.trigger.outputs.run_id }}
          HOST=${{ steps.host.outputs.airflow_host }}

          echo "⏳ Sleeping 10s for scheduler to pick up run…"
          sleep 10

          echo "⏳ Polling DAG run $RUN_ID up to 30 min (120×15s)…"
          for i in $(seq 1 120); do
            STATE=$(curl -fsS "${HOST}/api/v1/dags/${DAG}/dagRuns/${RUN_ID}" \
                      -u "${{ secrets.AIRFLOW_USER }}:${{ secrets.AIRFLOW_PASSWORD }}" \
                      | jq -r .state)

            echo "  attempt #$i → state = '$STATE'"
            if [[ "$STATE" == "success" ]]; then
              echo "✅ DAG run succeeded"
              exit 0
            elif [[ "$STATE" == "failed" ]]; then
              echo "❌ DAG run failed"
              exit 1
            fi

            sleep 15
          done

          echo "❌ Timed out waiting for DAG run"
          exit 1

      # 8) optionally fire off your dbt Cloud job
      - name: Trigger dbt Cloud job
        if: ${{ github.event.inputs.run_dbt == 'true' }}
        env:
          ACCOUNT_ID: ${{ secrets.DBT_CLOUD_ACCOUNT_ID }}
          JOB_ID:     ${{ secrets.DBT_CLOUD_JOB_ID }}
          API_TOKEN:  ${{ secrets.DBT_API_TOKEN }}
        run: |
          echo "▶ Triggering dbt Cloud job $JOB_ID…"
          curl -fsS -X POST \
            "https://wz482.us1.dbt.com/api/v2/accounts/${ACCOUNT_ID}/jobs/${JOB_ID}/run/" \
            -H "Authorization: Token ${API_TOKEN}" \
            -H "Content-Type: application/json" \
            -d '{"cause":"Triggered after '"${{ github.event.inputs.dag_id }}"' DAG"}' \
          | jq
