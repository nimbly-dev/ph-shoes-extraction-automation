name: Run ph_shoes_etl DAG

on:
  workflow_dispatch:
    inputs:
      dag_id:
        description: 'Airflow DAG ID'
        required: true
        default: 'ph_shoes_etl'

env:
  AWS_REGION: ap-southeast-1
  EC2_INSTANCE_NAME: airflow-ec2

jobs:
  trigger-dag:
    runs-on: ubuntu-latest
    environment: main

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Configure AWS credentials for SSM
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ env.AWS_REGION }}

      - name: Resolve EC2 instance ID
        id: get_id
        run: |
          ID=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=${EC2_INSTANCE_NAME}" \
                      "Name=instance-state-name,Values=running" \
            --query "Reservations[0].Instances[0].InstanceId" \
            --output text)
          echo "id=$ID" >> $GITHUB_OUTPUT

      - name: Send SSM command
        id: send
        run: |
          INSTANCE_ID=${{ steps.get_id.outputs.id }}
          DAG_ID=${{ github.event.inputs.dag_id }}

          echo "â–¶ Sending SSM command to $INSTANCE_ID for DAG $DAG_ID"
          CMD_ID=$(aws ssm send-command \
            --instance-ids "$INSTANCE_ID" \
            --document-name AWS-RunShellScript \
            --comment "Trigger $DAG_ID DAG" \
            --parameters commands='[
              "docker exec airflow-scheduler unpause '"$DAG_ID"'",
              "docker exec airflow-scheduler trigger '"$DAG_ID"' --run-id gh-action-'"$(date +%s)"'"
            ]' \
            --region $AWS_REGION \
            --query "Command.CommandId" \
            --output text)

          echo "cmd_id=$CMD_ID" >> $GITHUB_OUTPUT

      - name: Wait for SSM command to complete
        continue-on-error: true
        run: |
          aws ssm wait command-executed \
            --command-id "${{ steps.send.outputs.cmd_id }}" \
            --instance-id "${{ steps.get_id.outputs.id }}" \
            --region $AWS_REGION

      - name: Fetch SSM invocation result
        if: always()
        run: |
          aws ssm get-command-invocation \
            --command-id "${{ steps.send.outputs.cmd_id }}" \
            --instance-id "${{ steps.get_id.outputs.id }}" \
            --region $AWS_REGION \
            --output json
