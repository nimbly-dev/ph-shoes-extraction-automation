name: Deploy Lambda Image

on:
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

jobs:
  build-image:
    runs-on: ubuntu-latest
    environment: main

    steps:
      - uses: actions/checkout@v3

      - uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ secrets.AWS_DEFAULT_REGION }}

      - run: docker build -t ph-shoes-lambda-shared ./lambda

      - run: docker save ph-shoes-lambda-shared:latest > lambda-image.tar

      - uses: actions/upload-artifact@v4
        with:
          name: lambda-image
          path: lambda-image.tar

  push-image:
    needs: build-image
    runs-on: ubuntu-latest
    environment: main

    steps:
      - uses: actions/download-artifact@v4
        with:
          name: lambda-image

      - run: docker load < lambda-image.tar

      - uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ secrets.AWS_DEFAULT_REGION }}

      - uses: aws-actions/amazon-ecr-login@v2

      - id: ecr
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          REPO=ph-shoes-lambda-shared-repo
          echo "ECR_URI=${ACCOUNT_ID}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/${REPO}" >> $GITHUB_OUTPUT

      - run: |
          IDS=$(aws ecr list-images --repository-name ph-shoes-lambda-shared-repo --filter tagStatus=TAGGED --query 'imageIds[*]' --output json)
          [[ "$IDS" != "[]" ]] && aws ecr batch-delete-image --repository-name ph-shoes-lambda-shared-repo --image-ids "$IDS"

      - run: |
          docker tag ph-shoes-lambda-shared:latest ${{ steps.ecr.outputs.ECR_URI }}:latest
          docker push    ${{ steps.ecr.outputs.ECR_URI }}:latest

      - run: |
          D=$(aws ecr describe-images --repository-name ph-shoes-lambda-shared-repo --query "imageDetails[?contains(imageTags,'latest')].imageDigest" --output text)
          echo "→ Pushed: ${{ steps.ecr.outputs.ECR_URI }}:latest"
          echo "→ Digest:  ${{ steps.ecr.outputs.ECR_URI }}@$D"
